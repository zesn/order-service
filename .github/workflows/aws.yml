name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                       # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: my-app-repo                       # set this to your Amazon ECR repository name
  ECS_SERVICE: test-service                  # set this to your Amazon ECS service name
  ECS_CLUSTER: zesn-cluster                      # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/my-task-defination-revision5.json 
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: myrepo                       # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    -  name: Build with Maven
       run: mvn -B clean install --file pom.xml    
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        #IMAGE_TAG: nginx
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.

        docker pull nginx
        docker tag nginx:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest



        #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        

   
